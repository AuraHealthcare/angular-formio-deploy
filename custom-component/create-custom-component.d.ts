import { BuilderInfo, ExtendedComponentSchema } from 'formiojs';
import { FormioCustomComponentInfo, FormioCustomElement } from '../formio.common';
export declare function createCustomFormioComponent(customComponentOptions: FormioCustomComponentInfo): {
    new (component: ExtendedComponentSchema<any>, options: any, data: any): {
        id: string;
        type: string;
        element: HTMLElement;
        _value: any;
        _customAngularElement: FormioCustomElement;
        readonly defaultSchema: ExtendedComponentSchema<any>;
        readonly emptyValue: any;
        component: ExtendedComponentSchema<any>;
        elementInfo(): import("formiojs").ElementInfo;
        build(state: any): void;
        createInput(container: HTMLElement): HTMLElement;
        readonly info: import("formiojs").ElementInfo;
        readonly hasInput: any;
        readonly key: any;
        validators: ("required" | "minLength" | "maxLength" | "pattern" | "custom" | "customPrivate" | "min" | "max" | "minSelectedCount" | "maxSelectedCount" | "minWords" | "maxWords" | "email" | "url" | "date" | "day" | "json" | "mask" | "minDate" | "maxDate")[];
        calculatedValue: any;
        currentForm: any;
        errorContainer: any;
        getModifiedSchema(schema: ExtendedComponentSchema<any>, defaultSchema: import("formiojs").ComponentSchema<any>): ExtendedComponentSchema<any>;
        readonly schema: ExtendedComponentSchema<any>;
        t(text: string, params: Object): any;
        performInputMapping(input: any): any;
        getBrowserLanguage(): string;
        beforeNext(): any;
        beforeSubmit(): any;
        readonly submissionTimezone: any;
        readonly shouldDisable: boolean;
        attachRefreshEvent(refreshData: any): void;
        attachRefreshOn(): void;
        readonly viewOnly: any;
        viewOnlyBuild(): void;
        createViewOnlyElement(): HTMLElement;
        createViewOnlyLabel(container: any): void;
        createViewOnlyValue(container: any): void;
        setupValueElement(element: any): void;
        readonly defaultViewOnlyValue: "-";
        getView(value: any): string;
        updateItems(...args: any): void;
        updateViewOnlyValue(): void;
        createModal(): HTMLElement;
        readonly className: string;
        readonly customStyle: string;
        getElement(): HTMLElement;
        createElement(): HTMLElement;
        createWrapper(): boolean;
        evalContext(additional: any): any;
        readonly defaultValue: any;
        setPristine(pristine: boolean): void;
        addNewValue(value: any): void;
        addValue(): void;
        removeValue(index: number): void;
        buildRows(values: any): void;
        readonly allowReorder: boolean;
        addDraggable(containers: Element[]): void;
        getRowDragulaOptions(): {
            moves: (draggedElement: any, oldParent: any, clickedElement: any) => any;
        };
        onRowDrop(droppedElement: any, newParent: any, oldParent: any, nextSibling: any): void;
        buildInput(container: HTMLElement, value: any): void;
        addButton(justIcon: boolean): HTMLElement;
        readonly name: string;
        readonly errorLabel: any;
        errorMessage(type: any): any;
        removeButton(index: number): HTMLElement;
        dragButton(): HTMLElement;
        labelOnTheLeft(position: string): boolean;
        labelOnTheRight(position: string): boolean;
        rightAlignedLabel(position: string): boolean;
        labelOnTheLeftOrRight(position: string): boolean;
        getLabelWidth(): number;
        getLabelMargin(): number;
        setInputStyles(input: any): void;
        labelIsHidden(): boolean;
        createLabel(container: HTMLElement): void;
        addShortcutToLabel(label: string, shortcut: string | RegExp): string;
        addShortcut(element: any, shortcut: any): void;
        removeShortcut(element: any, shortcut: any): void;
        createTooltip(container: HTMLElement, component: any, classes: string): void;
        createDescription(container: any): void;
        createErrorElement(): void;
        addPrefix(input: HTMLElement, inputGroup: HTMLElement): HTMLElement;
        addSuffix(input: HTMLElement, inputGroup: HTMLElement): HTMLElement;
        addInputGroup(input: HTMLElement, container: HTMLElement): HTMLElement;
        setInputMask(input: HTMLElement, inputMask?: string): void;
        readonly widget: any;
        createWidget(): any;
        redraw(shouldRedrawInBuilder: boolean): void;
        destroyInputs(): void;
        destroy(): any;
        renderTemplate(template: any, data: any, actions?: any[]): HTMLElement;
        renderElement(template: any, data: any, actions?: any[]): ChildNode;
        renderTemplateToElement(element: any, template: any, data: any, actions?: any[]): any;
        attachActions(element: any, actions: any[]): void;
        hasCondition(): boolean;
        conditionallyVisible(data: any): boolean;
        checkCondition(row: any, data: Object): boolean;
        checkConditions(data: any): any;
        readonly logic: any[];
        fieldLogic(data: any): any;
        applyActions(actions: any[], result: any, data: any, newComponent: any): boolean;
        addInputError(message: any, dirty: boolean): void;
        inContext(component: any): boolean;
        show(show: boolean, noClear: boolean): boolean;
        showElement(element: any, show: boolean): boolean;
        clearOnHide(show: boolean): void;
        visible: any;
        parentVisible: any;
        onChange(flags: Object, fromRoot: boolean): void;
        addInputSubmitListener(input: any): void;
        addInputEventListener(input: any): void;
        addInput(input: any, container: any): any;
        addFocusBlurEvents(element: any): void;
        readonly wysiwygDefault: {
            theme: string;
            placeholder: any;
            modules: {
                clipboard: {
                    matchVisual: boolean;
                };
                toolbar: any[];
            };
        };
        addCKE(element: any, settings: Object, onChange: (input: any) => any): any;
        addQuill(element: any, settings: Object, onChange: (input: any) => any): any;
        hasValue(data: Object): boolean;
        readonly value: any;
        readonly rootValue: any;
        dataValue: any;
        splice(index: string | number): void;
        deleteValue(): void;
        getValueAt(index: number): any;
        getValue(): any;
        hasChanged(before: any, after: any): boolean;
        updateOnChange(flags: any, changed: any): boolean;
        updateValue(flags: any, value: any): any;
        readonly hasSetValue: boolean;
        restoreValue(): void;
        calculateValue(data: Object, flags: any): boolean;
        label: any;
        getRoot(): import("formiojs").BaseComponent;
        invalidMessage(data: any, dirty: boolean, ignoreCondition?: boolean): any;
        isValid(data: any, dirty: boolean): boolean;
        checkValidity(data: any, dirty: any, rowData: any): boolean;
        readonly validationValue: any;
        isEmpty(value: any): boolean;
        validateMultiple(value: any): boolean;
        readonly errors: any[];
        setCustomValidity(message: any, dirty: any): void;
        shouldSkipValidation(data: any, dirty: any, rowData: any): boolean;
        setValueAt(index: number, value: any, flags: any): void;
        getFlags(): any;
        readonly dataReady: any;
        refresh(value: any): void;
        setValue(value: any, flags: any): boolean;
        resetValue(): void;
        asString(value: any): string;
        disabled: boolean;
        setDisabled(element: any, disabled: any): void;
        setLoading(element: any, loading: any): void;
        selectOptions(select: any, tag: any, options: any, defaultValue: any): void;
        setSelectValue(select: any, value: any): void;
        clear(): any;
        autofocus(): void;
        focus(): void;
        append(element: HTMLElement): void;
        prepend(element: HTMLElement): void;
        removeChild(element: HTMLElement): void;
        attachLogic(): void;
        on(event: string, cb: Function, internal: boolean): any;
        off(event: string): void;
        emit(event: string, data: Object): void;
        addEventListener(obj: HTMLElement, type: string, func: Function, persistent?: boolean): any;
        removeEventListener(obj: Object, type: any): any;
        appendTo(element: any, container: any): any;
        prependTo(element: HTMLElement, container: HTMLElement): any;
        removeChildFrom(element: HTMLElement, container: HTMLElement): any;
        ce(type: string, attr?: Object, children?: string | HTMLElement | (string | HTMLElement)[]): HTMLElement;
        appendChild(element: any, child: any): any;
        maskPlaceholder(mask: HTMLElement): string;
        text(text: any): Text;
        attr(element: HTMLElement, attr: Object): void;
        hasClass(element: any, className: string): boolean;
        addClass(element: HTMLElement, className: string): any;
        removeClass(element: HTMLElement, className: string): any;
        empty(element: HTMLElement): void;
        iconClass(name: string, spinning: boolean): string;
        getIcon(name: string): HTMLElement;
        interpolate(string: any, data: any): any;
        evaluate(func: any, args: any, ret: any, tokenize: any): any;
        hook(): any;
    };
    editForm: () => {
        components: ExtendedComponentSchema<any>[];
    };
    readonly builderInfo: BuilderInfo;
    schema(): ExtendedComponentSchema<any>;
    tableView(value: any, options: any): void;
};
